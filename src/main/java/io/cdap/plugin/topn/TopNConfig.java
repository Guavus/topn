/*
 * Copyright Â© 2017-2019 Cask Data, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package io.cdap.plugin.topn;

import com.google.common.annotations.VisibleForTesting;
import io.cdap.cdap.api.annotation.Description;
import io.cdap.cdap.api.annotation.Macro;
import io.cdap.cdap.api.annotation.Name;
import io.cdap.cdap.api.data.schema.Schema;
import io.cdap.cdap.api.plugin.PluginConfig;
import io.cdap.cdap.etl.api.FailureCollector;

import javax.annotation.Nullable;

/**
 * Config for top N of plugins.
 */
public class TopNConfig extends PluginConfig {

  public static final int MAX_TOP = 1024*1024;
  public static final String FIELD = "field";
  public static final String SIZE = "size";
  public static final String IGNORE_NULL = "ignoreNull";

  @Name(FIELD)
  @Description("The field which top results are sorted by.")
  @Macro
  private String field;

  @Name(SIZE)
  @Description("The maximum number of top records sorted by 'field' in result (DEFAULT: 1)")
  @Macro
  @Nullable
  private Integer size;

  @Name(IGNORE_NULL)
  @Description("Set to 'true' to ignore records with null value in the field to sort by (DEFAULT : false)")
  @Macro
  @Nullable
  private Boolean ignoreNull;

  public TopNConfig() {
    this.field = "";
    this.size = null;
    this.ignoreNull = null;
  }

  public void validate(FailureCollector failureCollector, @Nullable Schema inputSchema) {

    // Check existence and type of the field.
    if (!containsMacro(FIELD)) {
      Schema.Field field = inputSchema.getField(getTopField());
      if (field == null) {
        failureCollector.addFailure(
          String.format("Field '%s' must exist in the input schema.", getTopField()), null)
          .withConfigProperty(FIELD);
      } else {
        Schema nonNullableSchema = field.getSchema().isNullable()
          ? field.getSchema().getNonNullable()
          : field.getSchema();
        Schema.Type type = nonNullableSchema.getType();
        Schema.LogicalType logicalType = nonNullableSchema.getLogicalType();
        if (type != Schema.Type.INT && type != Schema.Type.LONG && type != Schema.Type.FLOAT
          && type != Schema.Type.DOUBLE || logicalType != null) {
          failureCollector.addFailure(
            String.format(
              "Field '%s' is of type '%s', only types allowed are numeric types.", getTopField(),
              nonNullableSchema.getDisplayName()), "Specify field with numeric type.")
            .withInputSchemaField(FIELD, null);
        }
      }
    }

    // Now we check for the count.
    if (!containsMacro(SIZE) && getTopSize() < 1) {
      failureCollector.addFailure(
        String.format(
          "Maximum number of top records to be generated by sorting field '%s' is '%d'.",
          getTopField(), getTopSize()
        ), "Change it to be a value greater than 0.").withConfigProperty(SIZE);
    }

    // Check now for max, we don't let the max get too big.
    if (!containsMacro(SIZE) && getTopSize() > MAX_TOP) {
      failureCollector.addFailure(
        String.format(
          "Size specified '%d' is greater than max allowed '%d'", getTopSize(), MAX_TOP
        ), String.format("Specify size in range from '%d' to '%d'.", 1, MAX_TOP)).withConfigProperty(SIZE);
    }
  }

  @VisibleForTesting
  TopNConfig(String topField, int topSize, boolean ignoreNull) {
    this.field = topField;
    this.size = topSize;
    this.ignoreNull = ignoreNull;
  }

  String getTopField() {
    return field;
  }

  void setTopField(String field) {
    this.field = field;
  }

  int getTopSize() {
    return size == null ? 1 : size;
  }

  void setTopSize(@Nullable Integer size) {
    this.size = size;
  }

  boolean getIgnoreNull() {
    return ignoreNull == null ? false : ignoreNull;
  }
}
